{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geogradev","text":"<p>A python package for geospatial analysis and mapping</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://mercedes1996.github.io/geogradev</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive map</li> <li>Process geospatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import geogradev\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geogradev.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geogradev/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n    return \"Hello World!\"\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/mercedes1996/geogradev/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geogradev could always use more documentation, whether as part of the official geogradev docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/mercedes1996/geogradev/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geogradev for local development.</p> <ol> <li> <p>Fork the geogradev repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geogradev.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geogradev\n$ cd geogradev/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geogradev tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/mercedes1996/geogradev/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#geogradev.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom Map class that extends folium.Map.</p> Source code in <code>geogradev/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"A custom Map class that extends folium.Map.\"\"\"\n\n    def __init__(self, center=(0, 0), zoom=2, **kwargs):\n        \"\"\"Initializes the Map object.\n\n        Args:\n            center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n            zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n            **kwargs: Additional keyword arguments for the folium.Map class.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n\n        geojson = folium.GeoJson(data=geojson, **kwargs)\n        geojson.add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Adds vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n        \"\"\"Adds a split map to the map.\n\n        Args:\n            left (str, optional): The tile layer for the left side of the split map. Defaults to \"openstreetmap\".\n            right (str, optional): The tile layer for the right side of the split map. Defaults to \"cartodbpositron\".\n        \"\"\"\n        from localtileserver import get_folium_tile_layer\n\n        if left.startswith(\"http\") or os.path.exists(left):\n            layer_left = get_folium_tile_layer(left, **kwargs)\n        else:\n            layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n        if right.startswith(\"http\") or os.path.exists(right):\n            layer_right = get_folium_tile_layer(right, **kwargs)\n        else:\n            layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n        sbs = folium.plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n        sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The initial center of the map as (latitude, longitude). Defaults to (0, 0).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map. Defaults to 2.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.Map class.</p> <code>{}</code> Source code in <code>geogradev/foliumap.py</code> <pre><code>def __init__(self, center=(0, 0), zoom=2, **kwargs):\n    \"\"\"Initializes the Map object.\n\n    Args:\n        center (tuple, optional): The initial center of the map as (latitude, longitude). Defaults to (0, 0).\n        zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n        **kwargs: Additional keyword arguments for the folium.Map class.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.GeoJson layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n\n    geojson = folium.GeoJson(data=geojson, **kwargs)\n    geojson.add_to(self)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', **kwargs)</code>","text":"<p>Adds a split map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>str</code> <p>The tile layer for the left side of the split map. Defaults to \"openstreetmap\".</p> <code>'openstreetmap'</code> <code>right</code> <code>str</code> <p>The tile layer for the right side of the split map. Defaults to \"cartodbpositron\".</p> <code>'cartodbpositron'</code> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n    \"\"\"Adds a split map to the map.\n\n    Args:\n        left (str, optional): The tile layer for the left side of the split map. Defaults to \"openstreetmap\".\n        right (str, optional): The tile layer for the right side of the split map. Defaults to \"cartodbpositron\".\n    \"\"\"\n    from localtileserver import get_folium_tile_layer\n\n    if left.startswith(\"http\") or os.path.exists(left):\n        layer_left = get_folium_tile_layer(left, **kwargs)\n    else:\n        layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n    if right.startswith(\"http\") or os.path.exists(right):\n        layer_right = get_folium_tile_layer(right, **kwargs)\n    else:\n        layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n    sbs = folium.plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n    sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#geogradev.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geogradev/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Adds vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"geogradev/","title":"geogradev module","text":"<p>Main module.</p>"},{"location":"geogradev/#geogradev.geogradev.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geogradev/geogradev.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Add basemap to the map.\n\n        Args:\n            basemap (str, optional): Basemap name. Defaults to \"OpenTopoMap\".\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):\n        \"\"\"Adds a graphical user interface (GUI) for selecting basemaps.\n\n        Args:\n            options (list, optional): A list of basemap options to display in the dropdown.\n                Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n            position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n        Behavior:\n            - A toggle button is used to show or hide the dropdown and close button.\n            - The dropdown allows users to select a basemap from the provided options.\n            - The close button removes the widget from the map.\n\n        Event Handlers:\n            - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n            - `on_button_click`: Closes and removes the widget from the map.\n            - `on_dropdown_change`: Updates the map's basemap when a new option is selected.\n        \"\"\"\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            button_style=\"\",\n            tooltip=\"Click me\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        dropdown = widgets.Dropdown(\n            options=options,\n            value=options[0],\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n        )\n        dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n        button = widgets.Button(\n            icon=\"times\",\n        )\n        button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        hbox = widgets.HBox([toggle, dropdown, button])\n\n        def on_toggle_change(change):\n            if change[\"new\"]:\n                hbox.children = [toggle, dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            hbox.close()\n            toggle.close()\n            dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        def on_dropdown_change(change):\n            if change[\"new\"]:\n                self.layers = self.layers[:-2]\n                self.add_basemap(change[\"new\"])\n\n        dropdown.observe(on_dropdown_change, names=\"value\")\n\n        control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n        self.add(control)\n\n    def add_widget(self, widget, position=\"topright\", **kwargs):\n        \"\"\"Add a widget to the map.\n\n        Args:\n            widget (ipywidgets.Widget): The widget to add.\n            position (str, optional): Position of the widget. Defaults to \"topright\".\n            **kwargs: Additional keyword arguments for the WidgetControl.\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n        self.add(control)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Add Google Map to the map.\n\n        Args:\n            map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n        \"\"\"\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"HYBRID\": \"y\",\n            \"TERRAIN\": \"p\",\n        }\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Adds vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(control)\n\n    def add_raster(self, filepath, **kwargs):\n\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(client, **kwargs)\n\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(self, image, bounds=None, **kwargs):\n        \"\"\"Adds an image to the map.\n\n        Args:\n            image (str): The file path to the image.\n            bounds (list, optional): The bounds for the image. Defaults to None.\n            **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_video(self, video, bounds=None, **kwargs):\n        \"\"\"Adds a video to the map.\n\n        Args:\n            video (str): The file path to the video.\n            bounds (list, optional): The bounds for the video. Defaults to None.\n            **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_wms_layer(\n        self, url, layers, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Adds a WMS layer to the map.\n\n        Args:\n            url (str): The WMS service URL.\n            layers (str): The layers to display.\n            **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n        \"\"\"\n        layer = ipyleaflet.WMSLayer(\n            url=url, layers=layers, format=format, transparent=transparent, **kwargs\n        )\n        self.add(layer)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Add basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Basemap name. Defaults to \"OpenTopoMap\".</p> <code>'OpenTopoMap'</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Add basemap to the map.\n\n    Args:\n        basemap (str, optional): Basemap name. Defaults to \"OpenTopoMap\".\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, options=None, position='topright')</code>","text":"<p>Adds a graphical user interface (GUI) for selecting basemaps.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>list</code> <p>A list of basemap options to display in the dropdown. Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].</p> <code>None</code> <code>position</code> <code>str</code> <p>The position of the widget on the map. Defaults to \"topright\".</p> <code>'topright'</code> <p>Behavior</p> <ul> <li>A toggle button is used to show or hide the dropdown and close button.</li> <li>The dropdown allows users to select a basemap from the provided options.</li> <li>The close button removes the widget from the map.</li> </ul> <p>Event Handlers:     - <code>on_toggle_change</code>: Toggles the visibility of the dropdown and close button.     - <code>on_button_click</code>: Closes and removes the widget from the map.     - <code>on_dropdown_change</code>: Updates the map's basemap when a new option is selected.</p> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):\n    \"\"\"Adds a graphical user interface (GUI) for selecting basemaps.\n\n    Args:\n        options (list, optional): A list of basemap options to display in the dropdown.\n            Defaults to [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n        position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n    Behavior:\n        - A toggle button is used to show or hide the dropdown and close button.\n        - The dropdown allows users to select a basemap from the provided options.\n        - The close button removes the widget from the map.\n\n    Event Handlers:\n        - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n        - `on_button_click`: Closes and removes the widget from the map.\n        - `on_dropdown_change`: Updates the map's basemap when a new option is selected.\n    \"\"\"\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        button_style=\"\",\n        tooltip=\"Click me\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    dropdown = widgets.Dropdown(\n        options=options,\n        value=options[0],\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n    )\n    dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n    button = widgets.Button(\n        icon=\"times\",\n    )\n    button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    hbox = widgets.HBox([toggle, dropdown, button])\n\n    def on_toggle_change(change):\n        if change[\"new\"]:\n            hbox.children = [toggle, dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        hbox.close()\n        toggle.close()\n        dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    def on_dropdown_change(change):\n        if change[\"new\"]:\n            self.layers = self.layers[:-2]\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_dropdown_change, names=\"value\")\n\n    control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Add Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Map type. Defaults to \"ROADMAP\".</p> <code>'ROADMAP'</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Add Google Map to the map.\n\n    Args:\n        map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n    \"\"\"\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"HYBRID\": \"y\",\n        \"TERRAIN\": \"p\",\n    }\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>The file path to the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the image. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.ImageOverlay layer.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_image(self, image, bounds=None, **kwargs):\n    \"\"\"Adds an image to the map.\n\n    Args:\n        image (str): The file path to the image.\n        bounds (list, optional): The bounds for the image. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(control)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Adds vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_video","title":"<code>add_video(self, video, bounds=None, **kwargs)</code>","text":"<p>Adds a video to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>The file path to the video.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the video. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.VideoOverlay layer.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_video(self, video, bounds=None, **kwargs):\n    \"\"\"Adds a video to the map.\n\n    Args:\n        video (str): The file path to the video.\n        bounds (list, optional): The bounds for the video. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_widget","title":"<code>add_widget(self, widget, position='topright', **kwargs)</code>","text":"<p>Add a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>ipywidgets.Widget</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>Position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> <code>**kwargs</code> <p>Additional keyword arguments for the WidgetControl.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_widget(self, widget, position=\"topright\", **kwargs):\n    \"\"\"Add a widget to the map.\n\n    Args:\n        widget (ipywidgets.Widget): The widget to add.\n        position (str, optional): Position of the widget. Defaults to \"topright\".\n        **kwargs: Additional keyword arguments for the WidgetControl.\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n    self.add(control)\n</code></pre>"},{"location":"geogradev/#geogradev.geogradev.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The WMS service URL.</p> required <code>layers</code> <code>str</code> <p>The layers to display.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.WMSLayer layer.</p> <code>{}</code> Source code in <code>geogradev/geogradev.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Adds a WMS layer to the map.\n\n    Args:\n        url (str): The WMS service URL.\n        layers (str): The layers to display.\n        **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n    \"\"\"\n    layer = ipyleaflet.WMSLayer(\n        url=url, layers=layers, format=format, transparent=transparent, **kwargs\n    )\n    self.add(layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geogradev, run this command in your terminal:</p> <pre><code>pip install geogradev\n</code></pre> <p>This is the preferred method to install geogradev, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geogradev from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/mercedes1996/geogradev\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geogradev in a project:</p> <pre><code>import geogradev\n</code></pre>"},{"location":"examples/dyba/","title":"Dyba","text":"In\u00a0[\u00a0]: Copied! In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, basemaps\nfrom ipywidgets import Dropdown, Button, VBox, Layout\nimport ipyleaflet\n</pre> from ipyleaflet import Map, basemaps from ipywidgets import Dropdown, Button, VBox, Layout import ipyleaflet In\u00a0[2]: Copied! <pre>apa = Map(center=(40, -100), zoom=4)\ndropdown = Dropdown(\n    options={\n        \"OpenStreetMap\": basemaps.OpenStreetMap.Mapnik,\n        \"OpenTopoMap\": basemaps.OpenTopoMap,\n        \"Satellite\": basemaps.Esri.WorldImagery,\n        \"Dark\": basemaps.CartoDB.DarkMatter,\n    },\n    description=\"Basemap:\",\n)\ndropdown.observe(lambda change: setattr(apa, \"basemap\", change[\"new\"]), names=\"value\")\napa.add_control(ipyleaflet.WidgetControl(widget=dropdown, position=\"topright\"))\napa\n</pre> apa = Map(center=(40, -100), zoom=4) dropdown = Dropdown(     options={         \"OpenStreetMap\": basemaps.OpenStreetMap.Mapnik,         \"OpenTopoMap\": basemaps.OpenTopoMap,         \"Satellite\": basemaps.Esri.WorldImagery,         \"Dark\": basemaps.CartoDB.DarkMatter,     },     description=\"Basemap:\", ) dropdown.observe(lambda change: setattr(apa, \"basemap\", change[\"new\"]), names=\"value\") apa.add_control(ipyleaflet.WidgetControl(widget=dropdown, position=\"topright\")) apa Out[2]: In\u00a0[3]: Copied! <pre>boton = Button(description=\"Ocultar\")\n\n\ndef toggle(b):\n    dropdown.layout.visibility = (\n        \"hidden\" if dropdown.layout.visibility != \"hidden\" else \"visible\"\n    )\n    boton.description = (\n        \"Mostrar\" if dropdown.layout.visibility == \"hidden\" else \"Ocultar\"\n    )\n\n\nboton.on_click(toggle)\napa.add_control(\n    ipyleaflet.WidgetControl(widget=VBox([dropdown, boton]), position=\"topright\")\n)\napa\n</pre> boton = Button(description=\"Ocultar\")   def toggle(b):     dropdown.layout.visibility = (         \"hidden\" if dropdown.layout.visibility != \"hidden\" else \"visible\"     )     boton.description = (         \"Mostrar\" if dropdown.layout.visibility == \"hidden\" else \"Ocultar\"     )   boton.on_click(toggle) apa.add_control(     ipyleaflet.WidgetControl(widget=VBox([dropdown, boton]), position=\"topright\") ) apa Out[3]: In\u00a0[4]: Copied! <pre>class MapaInteractivo(Map):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._configurar_controles()\n\n    def _configurar_controles(self):\n        self.dropdown = Dropdown(\n            options=[\n                (\"OpenStreetMap\", basemaps.OpenStreetMap.Mapnik),\n                (\"OpenTopoMap\", basemaps.OpenTopoMap),\n                (\"Satellite\", basemaps.Esri.WorldImagery),\n                (\"Dark\", basemaps.CartoDB.DarkMatter),\n            ],\n            description=\"Mapa:\",\n        )\n\n        self.boton = Button(description=\"Ocultar\")\n\n        self.dropdown.observe(lambda c: setattr(self, \"basemap\", c[\"new\"]), \"value\")\n        self.boton.on_click(\n            lambda b: [\n                setattr(\n                    self.dropdown.layout,\n                    \"visibility\",\n                    (\n                        \"hidden\"\n                        if self.dropdown.layout.visibility != \"hidden\"\n                        else \"visible\"\n                    ),\n                ),\n                setattr(\n                    self.boton,\n                    \"description\",\n                    (\n                        \"Mostrar\"\n                        if self.dropdown.layout.visibility == \"hidden\"\n                        else \"Ocultar\"\n                    ),\n                ),\n            ]\n        )\n\n        self.add_control(\n            ipyleaflet.WidgetControl(\n                widget=VBox([self.dropdown, self.boton]), position=\"topright\"\n            )\n        )\n</pre> class MapaInteractivo(Map):     def __init__(self, **kwargs):         super().__init__(**kwargs)         self._configurar_controles()      def _configurar_controles(self):         self.dropdown = Dropdown(             options=[                 (\"OpenStreetMap\", basemaps.OpenStreetMap.Mapnik),                 (\"OpenTopoMap\", basemaps.OpenTopoMap),                 (\"Satellite\", basemaps.Esri.WorldImagery),                 (\"Dark\", basemaps.CartoDB.DarkMatter),             ],             description=\"Mapa:\",         )          self.boton = Button(description=\"Ocultar\")          self.dropdown.observe(lambda c: setattr(self, \"basemap\", c[\"new\"]), \"value\")         self.boton.on_click(             lambda b: [                 setattr(                     self.dropdown.layout,                     \"visibility\",                     (                         \"hidden\"                         if self.dropdown.layout.visibility != \"hidden\"                         else \"visible\"                     ),                 ),                 setattr(                     self.boton,                     \"description\",                     (                         \"Mostrar\"                         if self.dropdown.layout.visibility == \"hidden\"                         else \"Ocultar\"                     ),                 ),             ]         )          self.add_control(             ipyleaflet.WidgetControl(                 widget=VBox([self.dropdown, self.boton]), position=\"topright\"             )         ) In\u00a0[5]: Copied! <pre>mi_mapa = MapaInteractivo(center=(40, -100), zoom=4)\nmi_mapa\n</pre> mi_mapa = MapaInteractivo(center=(40, -100), zoom=4) mi_mapa Out[5]:"},{"location":"examples/dyba/","title":"\u00b6","text":""},{"location":"examples/dyba/#this-is-a-dynamic-basemap","title":"This is a dynamic basemap\u00b6","text":""},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import geogradev.foliumap as geogradev\n</pre> import geogradev.foliumap as geogradev In\u00a0[2]: Copied! <pre>import folium\n\nself = folium.Map(location=[20, 0], zoom_start=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nfolium.GeoJson(url, name=\"Countries\").add_to(self)\nfolium.LayerControl().add_to(self)\nself\n</pre> import folium  self = folium.Map(location=[20, 0], zoom_start=2) url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" folium.GeoJson(url, name=\"Countries\").add_to(self) folium.LayerControl().add_to(self) self Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>self = geogradev.Map()\nself\n</pre> self = geogradev.Map() self Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>self = geogradev.Map(center=[40, -100], zoom=4)\nself\n</pre> self = geogradev.Map(center=[40, -100], zoom=4) self Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>import folium\n\nself = folium.Map(location=[40, -100], zoom_start=4)\nself\n</pre> import folium  self = folium.Map(location=[40, -100], zoom_start=4) self Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>self = geogradev.Map(\n    center=[40, -100],\n    zoom=4,\n)\nself\n</pre> self = geogradev.Map(     center=[40, -100],     zoom=4, ) self Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>import folium\nimport folium.plugins\n</pre> import folium import folium.plugins In\u00a0[8]: Copied! <pre>self = folium.Map(location=(30, 20), zoom_start=4)\n\nlayer_right = folium.TileLayer(\"openstreetmap\")\nlayer_left = folium.TileLayer(\"cartodbpositron\")\n\nsbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n\nlayer_left.add_to(self)\nlayer_right.add_to(self)\nsbs.add_to(self)\n\nself\n</pre> self = folium.Map(location=(30, 20), zoom_start=4)  layer_right = folium.TileLayer(\"openstreetmap\") layer_left = folium.TileLayer(\"cartodbpositron\")  sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)  layer_left.add_to(self) layer_right.add_to(self) sbs.add_to(self)  self Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>m = geogradev.Map()\n\n# Add the SideBySideLayers plugin to the map\nlayer_left.add_to(m)\nlayer_right.add_to(m)\nsbs.add_to(m)\n\nm\n</pre> m = geogradev.Map()  # Add the SideBySideLayers plugin to the map layer_left.add_to(m) layer_right.add_to(m) sbs.add_to(m)  m Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import geogradev.foliumap as geogradev\n</pre> import geogradev.foliumap as geogradev In\u00a0[2]: Copied! <pre>m = geogradev.Map(center=[40, -100], zoom=4, height=\"300px\")\nm\n</pre> m = geogradev.Map(center=[40, -100], zoom=4, height=\"300px\") m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>import folium\n\nm = folium.Map(location=[40, -100], zoom_start=4)\nm\n</pre> import folium  m = folium.Map(location=[40, -100], zoom_start=4) m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>m = geogradev.Map(\n    center=[40, -100],\n    zoom=4,\n)\nm\n</pre> m = geogradev.Map(     center=[40, -100],     zoom=4, ) m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = (38.128, 2.588)\nzoom = 5\n\nMap(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = (38.128, 2.588) zoom = 5  Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) Out[5]: In\u00a0[6]: Copied! <pre>basemaps.OpenTopoMap.url\n</pre> basemaps.OpenTopoMap.url Out[6]: <pre>'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'</pre> In\u00a0[7]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[8]: Copied! <pre>basemap = \"Esri.WorldTopoMap\"\neval(f\"ipyleaflet.basemaps.{basemap}\").url\n</pre> basemap = \"Esri.WorldTopoMap\" eval(f\"ipyleaflet.basemaps.{basemap}\").url Out[8]: <pre>'https://server.arcgisonline.com/ArcGIS/rest/services/{variant}/MapServer/tile/{z}/{y}/{x}'</pre> In\u00a0[9]: Copied! <pre>m = geogradev.Map(\n    center=[40, -100],\n    zoom=4,\n    basemap=\"Esri.WorldTopoMap\",\n)\n</pre> m = geogradev.Map(     center=[40, -100],     zoom=4,     basemap=\"Esri.WorldTopoMap\", ) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/lab_9/","title":"Lab 9","text":"In\u00a0[\u00a0]: Copied!"},{"location":"examples/lab_9/#creation-of-interactive-map-for-native-communities-of-san-martin-peru","title":"Creation of Interactive Map for Native Communities of San Mart\u00edn, Peru\u00b6","text":""},{"location":"examples/lab_9/#hello-friends-i-am-going-to-guide-you-step-by-step-to-create-an-interactive-map-focused-on-the-department-of-san-martin-peru-showing-relevant-information-about-native-communities","title":"Hello friends, I am going to guide you step by step to create an interactive map focused on the department of San Mart\u00edn, Peru, showing relevant information about native communities.\u00b6","text":""},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import geogradev\n</pre> import geogradev In\u00a0[2]: Copied! <pre>import ipyleaflet\nfrom ipyleaflet import TileLayer\nfrom ipyleaflet import GeoJSON\nimport json\nimport geopandas as gpd\n</pre> import ipyleaflet from ipyleaflet import TileLayer from ipyleaflet import GeoJSON import json import geopandas as gpd In\u00a0[3]: Copied! <pre>m = ipyleaflet.Map(center=(20, 0), zoom=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\ngdf = gpd.read_file(url)\ndata = gdf.__geo_interface__\ngj = GeoJSON(data=data)\nm.add_layer(gj)\n\nbounds = gdf.total_bounds\nm.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\nm\n</pre> m = ipyleaflet.Map(center=(20, 0), zoom=2) url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" gdf = gpd.read_file(url) data = gdf.__geo_interface__ gj = GeoJSON(data=data) m.add_layer(gj)  bounds = gdf.total_bounds m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])  m Out[3]: In\u00a0[4]: Copied! <pre>gdf.total_bounds\n</pre> gdf.total_bounds Out[4]: <pre>array([-179.99998854,  -89.        ,  179.99998854,   83.62360016])</pre> In\u00a0[5]: Copied! <pre>m.fit_bounds(\n    [\n        [gdf.total_bounds[1], gdf.total_bounds[0]],\n        [gdf.total_bounds[3], gdf.total_bounds[2]],\n    ]\n)\n</pre> m.fit_bounds(     [         [gdf.total_bounds[1], gdf.total_bounds[0]],         [gdf.total_bounds[3], gdf.total_bounds[2]],     ] ) In\u00a0[6]: Copied! <pre>m = ipyleaflet.Map(center=(20, 0), zoom=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\"\ngdf = gpd.read_file(url)\ndata = gdf.__geo_interface__\ngj = GeoJSON(data=data)\nm.add_layer(gj)\n\nbounds = gdf.total_bounds\nm.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\nm\n</pre> m = ipyleaflet.Map(center=(20, 0), zoom=2) url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\" gdf = gpd.read_file(url) data = gdf.__geo_interface__ gj = GeoJSON(data=data) m.add_layer(gj)  bounds = gdf.total_bounds m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]]) m Out[6]: In\u00a0[7]: Copied! <pre>import geogradev\n</pre> import geogradev"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import os\nimport rasterio\nimport rasterio.plot\nfrom ipyleaflet import Map\n</pre> import os import rasterio import rasterio.plot from ipyleaflet import Map In\u00a0[2]: Copied! <pre>from ipyleaflet import Map, TileLayer\nimport ipywidgets as widgets\nfrom traitlets import Unicode, Float, Dict, default\nfrom typing import Optional, Union\n</pre> from ipyleaflet import Map, TileLayer import ipywidgets as widgets from traitlets import Unicode, Float, Dict, default from typing import Optional, Union In\u00a0[3]: Copied! <pre>m = Map(center=(25, -115), zoom=4)\n</pre> m = Map(center=(25, -115), zoom=4) In\u00a0[4]: Copied! <pre># 1. Demonstrate adding a raster layer using TileLayer\n\nraster_layer = TileLayer(\n    url=\"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\",\n    name=\"DEM\",\n    opacity=0.8,\n)\nm.add_layer(raster_layer)  # Add the raster layer to the map\nm  # Display the map\n</pre> # 1. Demonstrate adding a raster layer using TileLayer  raster_layer = TileLayer(     url=\"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\",     name=\"DEM\",     opacity=0.8, ) m.add_layer(raster_layer)  # Add the raster layer to the map m  # Display the map Out[4]: In\u00a0[5]: Copied! <pre># 2. Demonstrate adding an image overlay\nfrom ipyleaflet import ImageOverlay\n\nimage_url = \"https://i0.wp.com/www.actualidadambiental.pe/wp-content/uploads/2013/03/colibri-cola-de-espatula-michael-tweddle.jpg\"\nimage_bounds = ((20, -150), (40, -120))  # Example bounds for the image overlay\nimage_overlay = ImageOverlay(\n    url=image_url, bounds=image_bounds, name=\"NASA Night Lights\", opacity=0.7\n)\nm.add_layer(image_overlay)\nm\n</pre> # 2. Demonstrate adding an image overlay from ipyleaflet import ImageOverlay  image_url = \"https://i0.wp.com/www.actualidadambiental.pe/wp-content/uploads/2013/03/colibri-cola-de-espatula-michael-tweddle.jpg\" image_bounds = ((20, -150), (40, -120))  # Example bounds for the image overlay image_overlay = ImageOverlay(     url=image_url, bounds=image_bounds, name=\"NASA Night Lights\", opacity=0.7 ) m.add_layer(image_overlay) m Out[5]: In\u00a0[6]: Copied! <pre># 3. Demonstrate adding a video overlay\n\nimage = ImageOverlay(\n    url=\"https://i.gifer.com/5yE.gif\",\n    bounds=((13, 100), (45, 130)),\n    opacity=0.8,\n    name=\"Animated Image\",\n)\n\nm.add(image)\nm\n</pre> # 3. Demonstrate adding a video overlay  image = ImageOverlay(     url=\"https://i.gifer.com/5yE.gif\",     bounds=((13, 100), (45, 130)),     opacity=0.8,     name=\"Animated Image\", )  m.add(image) m Out[6]: In\u00a0[7]: Copied! <pre># 4. Demonstrate adding a WMS layer\nfrom ipyleaflet import WMSLayer, basemaps\n\nwms = WMSLayer(\n    url=\"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\",\n    layers=\"nexrad-n0r-900913\",\n    format=\"image/png\",\n    transparent=True,\n    attribution=\"Weather data \u00a9 2012 IEM Nexrad\",\n)\n\nm = Map(basemap=basemaps.CartoDB.Positron, center=(38.491, -95.712), zoom=4)\nm.add(wms)\nm\n</pre> # 4. Demonstrate adding a WMS layer from ipyleaflet import WMSLayer, basemaps  wms = WMSLayer(     url=\"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\",     layers=\"nexrad-n0r-900913\",     format=\"image/png\",     transparent=True,     attribution=\"Weather data \u00a9 2012 IEM Nexrad\", )  m = Map(basemap=basemaps.CartoDB.Positron, center=(38.491, -95.712), zoom=4) m.add(wms) m Out[7]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/split_map/","title":"Split map","text":"In\u00a0[1]: Copied! <pre>import geogradev.foliumap as geogradev\n</pre> import geogradev.foliumap as geogradev In\u00a0[2]: Copied! <pre>import ipyleaflet\n\n\nclass Map(ipyleaflet.Map):\n    def add_split_map_control(self, left_layer, right_layer):\n        \"\"\"Adds a split map control to compare two layers.\"\"\"\n        split_map = ipyleaflet.SplitMapControl(\n            left_layer=left_layer, right_layer=right_layer\n        )\n        self.add_control(split_map)\n</pre> import ipyleaflet   class Map(ipyleaflet.Map):     def add_split_map_control(self, left_layer, right_layer):         \"\"\"Adds a split map control to compare two layers.\"\"\"         split_map = ipyleaflet.SplitMapControl(             left_layer=left_layer, right_layer=right_layer         )         self.add_control(split_map) In\u00a0[3]: Copied! <pre>m = Map(center=(0, 0), zoom=2)\nm.add_split_map_control(\n    left_layer=ipyleaflet.TileLayer(url=\"https://{s}.title.org/{z}/{x}/{y}.png\"),\n    right_layer=ipyleaflet.TileLayer(\n        url=\"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"\n    ),\n)\nm\n</pre> m = Map(center=(0, 0), zoom=2) m.add_split_map_control(     left_layer=ipyleaflet.TileLayer(url=\"https://{s}.title.org/{z}/{x}/{y}.png\"),     right_layer=ipyleaflet.TileLayer(         url=\"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"     ), ) m Out[3]: In\u00a0[4]: Copied! <pre>m = Map(center=[32.7748, 22.6282], zoom=13)\nleft = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"  # OpenStreetMap layer\nright = \"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"  # Esri OpenStreetMap layer\nleft_layer = ipyleaflet.TileLayer(url=left)\nright_layer = ipyleaflet.TileLayer(url=right)\nm.add_split_map_control(left_layer, right_layer)\nm\n</pre> m = Map(center=[32.7748, 22.6282], zoom=13) left = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"  # OpenStreetMap layer right = \"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"  # Esri OpenStreetMap layer left_layer = ipyleaflet.TileLayer(url=left) right_layer = ipyleaflet.TileLayer(url=right) m.add_split_map_control(left_layer, right_layer) m Out[4]: In\u00a0[5]: Copied! <pre>m = Map(center=[32.7748, 22.6282], zoom=13)\nleft = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"  # OpenStreetMap layer\nright = \"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"  # Esri OpenStreetMap layer\nm\n</pre> m = Map(center=[32.7748, 22.6282], zoom=13) left = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"  # OpenStreetMap layer right = \"https://{s}.tile.Esri.openstreetmap.org/{z}/{x}/{y}.png\"  # Esri OpenStreetMap layer m Out[5]:"}]}